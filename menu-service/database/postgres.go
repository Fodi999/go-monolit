package database

import (
	"database/sql"
	"fmt"
	"log"
	"os"

	_ "github.com/lib/pq"
)

var DB *sql.DB

func InitPostgres() {
	// ‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è menu-—Å–µ—Ä–≤–∏—Å–∞
	connStr := os.Getenv("MENU_DATABASE_URL")
	if connStr == "" {
		log.Fatal("‚ùå MENU_DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
	}

	var err error
	DB, err = sql.Open("postgres", connStr)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	if err = DB.Ping(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MENU")

	// üîå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgcrypto
	_, err = DB.Exec(`DO $$ BEGIN
		IF NOT EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'pgcrypto') THEN
			CREATE EXTENSION pgcrypto;
		END IF;
	END $$;`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgcrypto: %v", err)
	}
	fmt.Println("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgcrypto –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ")

	// üì¶ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	if os.Getenv("APP_ENV") == "development" {
		fmt.Println("‚ö†Ô∏è DEV MODE: –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")

		_, _ = DB.Exec(`DROP TABLE IF EXISTS calculation_ingredients CASCADE;`)
		_, _ = DB.Exec(`DROP TABLE IF EXISTS menu_calculations CASCADE;`)
		_, _ = DB.Exec(`DROP TABLE IF EXISTS inventory_items CASCADE;`)
		_, _ = DB.Exec(`DROP TABLE IF EXISTS menu_items CASCADE;`)
		_, _ = DB.Exec(`DROP TABLE IF EXISTS categories CASCADE;`)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
	_, err = DB.Exec(`CREATE TABLE IF NOT EXISTS categories (
		id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
		name TEXT NOT NULL UNIQUE,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	);`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã categories: %v", err)
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

	_, err = DB.Exec(`CREATE TABLE IF NOT EXISTS menu_items (
		id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
		name TEXT NOT NULL,
		description TEXT,
		price NUMERIC(10, 2),
		cost_price NUMERIC(10, 2),
		image_url TEXT,
		margin NUMERIC(10, 2),
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
		published BOOLEAN NOT NULL DEFAULT FALSE
	);`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã menu_items: %v", err)
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ menu_items –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

	_, err = DB.Exec(`CREATE TABLE IF NOT EXISTS inventory_items (
		id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
		product_name TEXT NOT NULL,
		weight_grams INTEGER NOT NULL,
		price_per_kg NUMERIC(10, 2) NOT NULL,
		available BOOLEAN DEFAULT true,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		emoji TEXT DEFAULT 'üçΩÔ∏è'
	);`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã inventory_items: %v", err)
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ inventory_items –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

	_, err = DB.Exec(`CREATE TABLE IF NOT EXISTS menu_calculations (
		id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
		menu_item_id UUID NOT NULL REFERENCES menu_items(id) ON DELETE CASCADE,
		total_output_grams INTEGER NOT NULL,
		total_cost NUMERIC(10, 2) NOT NULL,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	);`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã menu_calculations: %v", err)
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ menu_calculations –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

	_, err = DB.Exec(`CREATE TABLE IF NOT EXISTS calculation_ingredients (
		id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
		calculation_id UUID NOT NULL REFERENCES menu_calculations(id) ON DELETE CASCADE,
		product_name TEXT NOT NULL,
		amount_grams INTEGER NOT NULL,
		price_per_kg NUMERIC(10, 2) NOT NULL,
		waste_percent NUMERIC(5, 2) DEFAULT 0.0,
		price_after_waste NUMERIC(10, 2) NOT NULL,
		total_cost NUMERIC(10, 2) NOT NULL,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	);`)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã calculation_ingredients: %v", err)
	}
	fmt.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ calculation_ingredients –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
}













