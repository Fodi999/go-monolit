package handlers

import (
	"github.com/gofiber/fiber/v2"
	"gorm.io/gorm"
	"monolith/menu-service/database"
	"monolith/menu-service/models"
)

// –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
type AddToCartBody struct {
	MenuItemID string  `json:"menuItemId"`
	Name       string  `json:"name"`
	Quantity   int     `json:"quantity"`
	Price      float64 `json:"price"`
}

// üì¶ –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetCart(c *fiber.Ctx) error {
	userID := c.Params("userId")

	var cart models.Cart
	if err := database.DB.
		Preload("Items").
		FirstOrCreate(&cart, models.Cart{UserID: userID}).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"})
	}

	// –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º ImageURL –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
	for i := range cart.Items {
		var mi models.MenuItem
		if err := database.DB.
			Select("image_url").
			First(&mi, "id = ?", cart.Items[i].MenuItemID).
			Error; err == nil {
			cart.Items[i].ImageURL = mi.ImageURL
		}
	}

	return c.JSON(cart)
}

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
func AddToCart(c *fiber.Ctx) error {
	userID := c.Params("userId")

	var body AddToCartBody
	if err := c.BodyParser(&body); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–Ω–µ–≤–µ—Ä–Ω—ã–π JSON"})
	}

	var cart models.Cart
	if err := database.DB.FirstOrCreate(&cart, models.Cart{UserID: userID}).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"})
	}

	var item models.CartItem
	err := database.DB.
		Where("cart_id = ? AND menu_item_id = ?", cart.ID, body.MenuItemID).
		First(&item).Error

	if err == gorm.ErrRecordNotFound {
		item = models.CartItem{
			CartID:     cart.ID,
			MenuItemID: body.MenuItemID,
			Name:       body.Name,
			Quantity:   body.Quantity,
			Price:      body.Price,
		}
		if err := database.DB.Create(&item).Error; err != nil {
			return c.Status(500).JSON(fiber.Map{"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"})
		}
	} else if err == nil {
		item.Quantity += body.Quantity
		if err := database.DB.Save(&item).Error; err != nil {
			return c.Status(500).JSON(fiber.Map{"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"})
		}
	} else {
		return c.Status(500).JSON(fiber.Map{"error": "–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"})
	}

	// –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
	var mi models.MenuItem
	if err := database.DB.Select("image_url").
		First(&mi, "id = ?", item.MenuItemID).Error; err == nil {
		item.ImageURL = mi.ImageURL
	}

	return c.JSON(item)
}

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
func UpdateCartItem(c *fiber.Ctx) error {
	userID := c.Params("userId")
	menuItemID := c.Params("menuItemId")

	var body struct {
		Quantity int `json:"quantity"`
	}
	if err := c.BodyParser(&body); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–Ω–µ–≤–µ—Ä–Ω—ã–π JSON"})
	}

	var cart models.Cart
	if err := database.DB.First(&cart, "user_id = ?", userID).Error; err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "–∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
	}

	var item models.CartItem
	if err := database.DB.
		Where("cart_id = ? AND menu_item_id = ?", cart.ID, menuItemID).
		First(&item).Error; err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "—Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}

	if body.Quantity > 0 {
		item.Quantity = body.Quantity
		if err := database.DB.Save(&item).Error; err != nil {
			return c.Status(500).JSON(fiber.Map{"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"})
		}
	} else {
		if err := database.DB.Delete(&item).Error; err != nil {
			return c.Status(500).JSON(fiber.Map{"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"})
		}
		return c.SendStatus(204)
	}

	// –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
	var mi models.MenuItem
	if err := database.DB.Select("image_url").
		First(&mi, "id = ?", item.MenuItemID).Error; err == nil {
		item.ImageURL = mi.ImageURL
	}

	return c.JSON(item)
}

// üöÆ –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
func RemoveCartItem(c *fiber.Ctx) error {
	userID := c.Params("userId")
	menuItemID := c.Params("menuItemId")

	var cart models.Cart
	if err := database.DB.First(&cart, "user_id = ?", userID).Error; err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "–∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
	}

	if err := database.DB.
		Where("cart_id = ? AND menu_item_id = ?", cart.ID, menuItemID).
		Delete(&models.CartItem{}).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"})
	}

	return c.SendStatus(204)
}

// üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É
func ClearCart(c *fiber.Ctx) error {
	userID := c.Params("userId")

	var cart models.Cart
	if err := database.DB.First(&cart, "user_id = ?", userID).Error; err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "–∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
	}

	if err := database.DB.
		Where("cart_id = ?", cart.ID).
		Delete(&models.CartItem{}).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"})
	}

	return c.SendStatus(204)
}




