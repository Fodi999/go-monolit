package handlers

import (
	"encoding/json"

	"github.com/gofiber/fiber/v2"
	"monolith/menu-service/database"
	"monolith/menu-service/models"
)

// üì¶ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func GetAllMenuItems(c *fiber.Ctx) error {
	var items []models.MenuItem
	if err := database.DB.Find(&items).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–∞",
		})
	}
	return c.JSON(items)
}

// üìÇ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func GetPublishedMenuItemsWithCategory(c *fiber.Ctx) error {
	var result []models.MenuItemWithCategory

	err := database.DB.Table("menu_items").
		Select("menu_items.*, categories.name as category_name").
		Joins("LEFT JOIN categories ON menu_items.category_id = categories.id").
		Where("menu_items.published = TRUE").
		Scan(&result).Error

	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
		})
	}

	return c.JSON(result)
}

// üìÇ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (JOIN)
func GetAllMenuItemsWithCategory(c *fiber.Ctx) error {
	var result []models.MenuItemWithCategory

	err := database.DB.Table("menu_items").
		Select("menu_items.*, categories.name as category_name").
		Joins("LEFT JOIN categories ON menu_items.category_id = categories.id").
		Scan(&result).Error

	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
		})
	}

	return c.JSON(result)
}

// üì¶ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
func GetPublishedMenuItems(c *fiber.Ctx) error {
	var items []models.MenuItem
	if err := database.DB.Where("published = TRUE").Find(&items).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞",
		})
	}
	return c.JSON(items)
}

// üìä –ü–æ–ª—É—á–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é –ø–æ –±–ª—é–¥—É
func GetCalculationByMenuItemID(c *fiber.Ctx) error {
	menuItemID := c.Params("menuItemId")
	var calc models.Calculation

	if err := database.DB.
		Where("menu_item_id = ?", menuItemID).
		First(&calc).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "–ö–∞–ª—å–∫—É–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
		})
	}
	return c.JSON(calc)
}

// üçΩ –ü–æ–ª—É—á–∏—Ç—å –±–ª—é–¥–æ –ø–æ ID
func GetMenuItemByID(c *fiber.Ctx) error {
	id := c.Params("id")
	var item models.MenuItem

	if err := database.DB.First(&item, "id = ?", id).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
		})
	}
	return c.JSON(item)
}

// üçΩ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
func CreateMenuItem(c *fiber.Ctx) error {
	var item models.MenuItem
	if err := c.BodyParser(&item); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞",
		})
	}
	item.Margin = item.Price - item.CostPrice

	if err := database.DB.Create(&item).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–ª—é–¥–æ",
		})
	}
	return c.Status(fiber.StatusCreated).JSON(item)
}

// üõ† –û–±–Ω–æ–≤–∏—Ç—å –±–ª—é–¥–æ
func UpdateMenuItem(c *fiber.Ctx) error {
	id := c.Params("id")
	var input models.MenuItem

	if err := json.Unmarshal(c.Body(), &input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞",
		})
	}
	input.Margin = input.Price - input.CostPrice

	var item models.MenuItem
	if err := database.DB.First(&item, "id = ?", id).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
		})
	}

	item.Name = input.Name
	item.Description = input.Description
	item.Price = input.Price
	item.CostPrice = input.CostPrice
	item.Margin = input.Margin
	item.ImageURL = input.ImageURL
	item.CategoryID = input.CategoryID

	if err := database.DB.Save(&item).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–ª—é–¥–æ",
		})
	}

	return c.JSON(item)
}

// üîÑ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/—Å–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–ª—é–¥–æ
func PublishMenuItem(c *fiber.Ctx) error {
	id := c.Params("id")
	var item models.MenuItem

	if err := database.DB.First(&item, "id = ?", id).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
		})
	}

	item.Published = !item.Published
	if err := database.DB.Save(&item).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–ª—é–¥–∞",
		})
	}

	return c.SendStatus(fiber.StatusOK)
}

// ‚ùå –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ
func DeleteMenuItem(c *fiber.Ctx) error {
	id := c.Params("id")
	if err := database.DB.Delete(&models.MenuItem{}, "id = ?", id).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ",
		})
	}
	return c.JSON(fiber.Map{"message": "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ"})
}

// üì¶ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ —Å–∫–ª–∞–¥–∞
func GetInventoryItems(c *fiber.Ctx) error {
	var items []models.InventoryItem
	if err := database.DB.Find(&items).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
		})
	}
	return c.JSON(items)
}

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ —Å–∫–ª–∞–¥
func CreateInventoryItem(c *fiber.Ctx) error {
	var item models.InventoryItem
	if err := c.BodyParser(&item); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞",
		})
	}
	if err := database.DB.Create(&item).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ —Å–∫–ª–∞–¥",
		})
	}
	return c.Status(fiber.StatusCreated).JSON(item)
}

// üõ† –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ
func UpdateInventoryItem(c *fiber.Ctx) error {
	id := c.Params("id")
	var input models.InventoryItem

	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞",
		})
	}

	var item models.InventoryItem
	if err := database.DB.First(&item, "id = ?", id).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"error": "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
		})
	}

	item.ProductName = input.ProductName
	item.WeightGrams = input.WeightGrams
	item.PricePerKg = input.PricePerKg
	item.Available = input.Available
	item.Emoji = input.Emoji
	item.Category = input.Category

	if err := database.DB.Save(&item).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
		})
	}
	return c.JSON(item)
}

// üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å–æ —Å–∫–ª–∞–¥–∞
func DeleteInventoryItem(c *fiber.Ctx) error {
	id := c.Params("id")
	if err := database.DB.Delete(&models.InventoryItem{}, "id = ?", id).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å–æ —Å–∫–ª–∞–¥–∞",
		})
	}
	return c.JSON(fiber.Map{"message": "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω"})
}

// üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é
func CreateCalculationForDish(c *fiber.Ctx) error {
	var calc models.Calculation
	if err := c.BodyParser(&calc); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞",
		})
	}
	if err := database.DB.Create(&calc).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é",
		})
	}
	return c.Status(fiber.StatusCreated).JSON(fiber.Map{"message": "–ö–∞–ª—å–∫—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"})
}








